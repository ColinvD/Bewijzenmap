const canvas = document.getElementById('canvas');
const context = canvas.getContext('2d');

let a = new Point(100,40,20,"#ff0000");
let b = new Point(500,50,20,"#ff0000");
let c = new Point(125,100,20,"#ff0000");
setInterval(drawing, 1000/12);

function drawing() {
  LineA = new Line(a.x, a.y, b.x, b.y,3);
  LineB = new Line(b.x, b.y, c.x, c.y,3);
  LineC = new Line(a.x, a.y, c.x, c.y,3);
  Vecab = new Vector2();
  Vecba = new Vector2();
  Vecac = new Vector2();
  Vecca = new Vector2();
  Vecbc = new Vector2();
  Veccb = new Vector2();
  Vecbpa = new Vector2();
  Veccpb = new Vector2();
  Vecapc = new Vector2();
  /*Line_a = new PerpendicularLine(c.x, c.y, LineA.hill, LineA.inter,2, "#005CFF");
  Line_b = new PerpendicularLine(a.x, a.y, LineB.hill, LineB.inter,2, "#005CFF");
  Line_c = new PerpendicularLine(b.x, b.y, LineC.hill, LineC.inter,2, "#005CFF");
  snijd_a = new Point(0,0,5,"#9900ff");
  snijd_b = new Point(0,0,5,"#9900ff");
  snijd_c = new Point(0,0,5,"#9900ff");
  lineMiddleA = new Point(0,0,5,"#fed301");
  lineMiddleB = new Point(0,0,5,"#fed301");
  lineMiddleC = new Point(0,0,5,"#fed301");
  middle = new Point(0,0,4,"#ffffff");
  middle1 = new Point(0,0,4,"#ff00ff");
  middle2 = new Point(0,0,4,"#fe0ae7");*/
  context.clearRect(0,0,800,450);
  a.draw();
  a.drag();
  b.draw();
  b.drag();
  c.draw();
  c.drag();
  LineA.draw();
  LineB.draw();
  LineC.draw();
  /*
  Line_a.draw();
  Line_b.draw();
  Line_c.draw();
  snijd_a.x = (Line_a.inter - LineA.inter)/(LineA.hill - Line_a.hill);
  snijd_a.y = snijd_a.x*LineA.hill+LineA.inter;
  snijd_b.x = (Line_b.inter - LineB.inter)/(LineB.hill - Line_b.hill);
  snijd_b.y = snijd_b.x*LineB.hill+LineB.inter;
  snijd_c.x = (Line_c.inter - LineC.inter)/(LineC.hill - Line_c.hill);
  snijd_c.y = snijd_c.x*LineC.hill+LineC.inter;
  snijd_a.draw();
  snijd_b.draw();
  snijd_c.draw();
  middle.x = (snijd_a.x + snijd_b.x + snijd_c.x)/3;
  middle.y = (snijd_a.y + snijd_b.y + snijd_c.y)/3;
  middle.draw();
  middle1.x = (a.x + b.x + c.x)/3;
  middle1.y = (a.y + b.y + c.y)/3;
  middle1.draw();
  lineMiddleA.x = (a.x+b.x)/2;
  lineMiddleA.y = (a.y+b.y)/2;
  lineMiddleB.x = (b.x+c.x)/2;
  lineMiddleB.y = (b.y+c.y)/2;
  lineMiddleC.x = (a.x+c.x)/2;
  lineMiddleC.y = (a.y+c.y)/2;
  lineMiddleA.draw();
  lineMiddleB.draw();
  lineMiddleC.draw();
  middleLine_a = new Line(lineMiddleA.x, lineMiddleA.y, c.x, c.y,2, "#42c782");
  middleLine_b = new Line(lineMiddleB.x, lineMiddleB.y, a.x, a.y,2, "#42c782");
  middleLine_c = new Line(lineMiddleC.x, lineMiddleC.y, b.x, b.y,2, "#42c782");
  middleLine_a.draw();
  middleLine_b.draw();
  middleLine_c.draw();
  middlePerpendicularLine_a = new PerpendicularLine(lineMiddleA.x, lineMiddleA.y, LineA.hill, LineA.inter,2, "#feae0a");
  middlePerpendicularLine_b = new PerpendicularLine(lineMiddleB.x, lineMiddleB.y, LineB.hill, LineB.inter,2, "#feae0a");
  middlePerpendicularLine_c = new PerpendicularLine(lineMiddleC.x, lineMiddleC.y, LineC.hill, LineC.inter,2, "#feae0a");
  middlePerpendicularLine_a.draw();
  middlePerpendicularLine_b.draw();
  middlePerpendicularLine_c.draw();
  middle2.x = (middlePerpendicularLine_b.inter - middlePerpendicularLine_a.inter)/(middlePerpendicularLine_a.hill - middlePerpendicularLine_b.hill);
  middle2.y = middle2.x*middlePerpendicularLine_a.hill+middlePerpendicularLine_a.inter;
  middle2.draw();
  var distance = Math.sqrt(Math.pow(middle2.x-a.x,2) + Math.pow(middle2.y-a.y,2));
  outCircle = new Circle(middle2.x, middle2.y, distance, 5, "#3BDEF2");
  outCircle.draw();*/
  Vecab.dx = b.x - a.x;
  Vecab.dy = b.y - a.y;
  //Vecab.draw(context,a.x,a.y,1);
  Vecba.dx = a.x - b.x;
  Vecba.dy = a.y - b.y;
  //Vecba.draw(context,b.x,b.y,1);
  Vecac.dx = c.x - a.x;
  Vecac.dy = c.y - a.y;
  //Vecac.draw(context,a.x,a.y,1);
  Vecca.dx = a.x - c.x;
  Vecca.dy = a.y - c.y;
  //Vecca.draw(context,c.x,c.y,1);
  Vecbc.dx = c.x - b.x;
  Vecbc.dy = c.y - b.y;
  //Vecbc.draw(context,b.x,b.y,1);
  Veccb.dx = b.x - c.x;
  Veccb.dy = b.y - c.y;
  //Veccb.draw(context,c.x,c.y,1);
  Vecbpa.sumVector(Vecac,Vecab);
  Vecbpa.dx *= 0.5;
  Vecbpa.dy *= 0.5;
  Vecbpa.draw(context,a.x,a.y,1);
  Veccpb.sumVector(Vecbc,Vecba);
  Veccpb.dx *= 0.5;
  Veccpb.dy *= 0.5;
  Veccpb.draw(context,b.x,b.y,1);
  Vecapc.sumVector(Veccb,Vecca);
  Vecapc.dx *= 0.5;
  Vecapc.dy *= 0.5;
  Vecapc.draw(context,c.x,c.y,1);
  LineVeca = new Line(a.x,a.y,a.x+Vecbpa.dx,a.y+Vecbpa.dy,3);
  LineVecb = new Line(b.x,b.y,b.x+Veccpb.dx,b.y+Veccpb.dy,3);
  LineVeca.draw();
  LineVecb.draw();
  snijd_vec = new Point(0,0);
  snijd_vec.x = (LineVeca.inter - LineVecb.inter)/(LineVecb.hill - LineVeca.hill);
  snijd_vec.y = snijd_vec.x*LineVeca.hill+LineVeca.inter;
  snijd_vec.draw();
  perVec = new PerpendicularLine(snijd_vec.x,snijd_vec.y,LineA.hill,LineA.inter);
  perVec.draw();
  perHit = new Point();
  perHit.x = (LineA.inter - perVec.inter)/(perVec.hill - LineA.hill);
  perHit.y = perHit.x*LineA.hill+LineA.inter;
  perHit.draw();
  var Vecdis = Math.sqrt(Math.pow(snijd_vec.x-perHit.x,2) + Math.pow(snijd_vec.y-perHit.y,2));
  inCircle = new Circle(snijd_vec.x, snijd_vec.y, Vecdis, 5, "#3BDEF2");
  inCircle.draw();
}
